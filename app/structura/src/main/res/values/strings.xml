<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Structura</string>
    <string name="drawer_open">Open navigation drawer</string>
    <string name="drawer_close">Close navigation drawer</string>

    <!-- Landing page -->
    <string name="landing">Welcome</string>
    <string name="landing_body_txt_1">Welcome to Structura!</string>
    <string name="landing_body_txt_2">Tap around and see what interests you.</string>

    <!-- Navigation drawer sections -->
    <string name="title_linked_list">Linked List</string>
    <string name="title_bst">Binary Search Tree</string>
    <string name="title_settings">Settings</string>
    <string name="title_about">About</string>

    <!-- Play buttons -->
    <string name="btn_insert_label">Insert</string>
    <string name="btn_delete_label">Delete</string>
    <string name="btn_search_label">Search</string>

    <!-- Content description -->
    <string name="desc_list_item_icon">Item Icon</string>
    <string name="desc_landing_img">Landing Image</string>
    <string name="desc_example">Example action</string>
    <string name="desc_settings">Settings</string>

    <!-- Tabs -->
    <string name="title_play">Play</string>
    <string name="title_summary">Summary</string>
    <string name="title_quiz">Quiz</string>

    <!-- Dialogs -->
    <string name="dialog_insert_title">Insert node</string>
    <string name="dialog_delete_title">Delete which node?</string>
    <string name="dialog_search_title">Find which node?</string>

    <string name="nodeValue">Value</string>
    <string name="nodeNext">Next</string>
    <string name="nodeValueDigit">0</string>

    <!-- Summaries -->
    <string name="ll_summary_body">
        <![CDATA[
        <p>Linked list is a common data structure used in computer science. There are many kinds of linked lists, but we will discuss singly linked lists (SLL) here.</p>
        <p>In an SLL, each node is composed of a value <em>data</em> and a pointer <em>next</em> to the next node in the sequence. This structure allows for efficient insertion or removal of elements from any position in the sequence.</p>
        <p>SLLs can be used to implement several other common abstract data types, including lists (the abstract data type), stacks, queues, associative arrays (dictionaries), etc.</p>
        <p>Generally, we also store a pointer <em>head</em> which points to the first element of the linked list.</p>
        <p>The SLL supports the following operations:</p>
        <p><strong>Insert:</strong> We insert a new node = (<em>d</em>, <em>null</em>) into an SLL. Here, <em>d</em> is its data value and its <em>next</em> parameter is <em>null</em> at the moment.</p>
        <p>We first make the <em>next</em> pointer of this node to point to the current head, and then the head pointer to point to the new node. This way, we insert the node to the front of the SLL.</p>
        <p><strong>Delete:</strong> We take the node as input whose next node has to be deleted. That way, we just set the value of <em>node.next</em> to <em>node.next.next</em>, and destroy <em>node.next</em>.</p>
        <p><strong>Search:</strong> In order to search the SLL for a value, we start with the head, and loop until the value is found, that is, <em>node.data</em> = <em>value</em>, or return <em>False</em> otherwise.</p>
        <p>In each iteration of the loop, we check if the current node\'s data is equal to the input value, if it is not, we make the current node equal to current <em>node.next</em>.</p>
        ]]>
    </string>
</resources>